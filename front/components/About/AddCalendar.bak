import React, {Component} from 'react';
import { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';
import styled from "styled-components"
import { DateRange } from 'react-date-range';
import AvailableDayItem from "./AvailableDayItem";
import _ from "lodash"
import * as PropTypes from "prop-types";
import dayjs from "dayjs";
import axios from "axios";
import {API_USER_PROFILE_CALENDAR} from "../../constant/ENV";
import {_error_handler} from "../../utils/errorHandler";
import {compose} from "recompose";
import {withNamespaces} from "../../lib/i18n";
import {withToastManager} from "react-toast-notifications";
import {connect} from "react-redux";
import {setCalendar} from "../../redux/actions/personalAction";
import {getCalendar} from "../../services/personalService";

const DEFAULT_COLOR = "#45A88C"
const DEFAULT_COLOR_LIST = ["#45A88C","#45A88C","#45A88C"]

const Content = styled.div`
  justify-content: center;
  align-items: center;
  display: flex;
  flex-direction: column;
`
const Save = styled(Button)`
  background-color: #0F143A;
  border: none;
  margin-left: .3em;
  min-width: 115px;
  &:hover{
    background-color: #0c1561;
    border: none;
  }
`
const Cancel = styled(Button)`
  border: none;
  min-width: 115px;
`
const ButtonGroup = styled.div`
    justify-content: center;
    align-items: center;
    display: flex;
    margin-top: 20px;
`

const TopButton = styled(Button)`
  background: none;
  border: none;
  color: #010046;
  text-decoration: underline;
  font-family: "Cloud", "sans-serif";
  padding: 0 0 .5em;
  &:hover{
    background: none;
    border: none;
    color: #010046;
  }
  &:active{
    background: none !important;
    border: none !important;
    color: #010046 !important;
  }
  &:focus{
    box-shadow: none !important;
    border: none !important;
    outline:none !important;
  }
`

const DateWrap = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  width:100%;
  border-bottom:solid 1.5px #c2c2c2;
  margin-bottom:1em;
`

const DayList = styled.div`
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  width: 100%;
`

const DaysHeader = styled.span`
    font-family: "Cloud";
    font-size: 1.1em;
`

const NoCalendar = styled.span`
    padding-top: 25px;
    padding-bottom: 25px;
    font-size: 1.5em;
    font-style: italic;
    color: #b3b3b3;
    font-family: "Cloud light";
`


let keyCount = 1;
class AddCalendar extends Component {
    constructor(props) {
        super(props);
        this.state = {
            selectDate:[
            ],
            selectItem:0,
            selectMode:0,
            year:"2019"
        }
    }

    handleSelect = (ranges) =>{
        const {selectItem,selectDate,selectMode} = this.state
        if (ranges){
            let select = selectDate.map((item,i)=>{
                if (i===selectItem){
                        return {
                            ...item,
                            startDate: ranges[selectDate[i].key].startDate,
                            endDate: ranges[selectDate[i].key].endDate,
                        }
                }
                return item
            })
            // console.log(ranges,select);
            this.setState({
                selectDate:select,
                selectMode:(selectMode+1)%2
            })
        }

    }

    onSelectToEdit = (key) =>{
        this.setState({
            selectItem:key
        })
    }

    onAddDate = () =>{
        let {selectDate} = this.state
        selectDate.push({
            startDate: new Date(),
            endDate: new Date(),
            caption:"วันว่าง " + keyCount,
            key: 'selection' + keyCount++,
        })

        this.setState({selectDate,selectItem:selectDate.length-1});
    }

    onClearAll = () =>{
        this.setState({
            selectDate:[],
            selectItem:0
        })
    }

    onRemove = (key)=>{
        let deleted = this.state.selectDate.filter((item)=>(item.key !== key))
        this.setState({selectDate:deleted});
    }

    onSaveDate = async () =>{
        let data = this.state.selectDate.map(item=>{
            return   {
                "title": item.caption,
                "startDate": dayjs(item.startDate).format("YYYY-MM-DD"),
                "endDate": dayjs(item.endDate).format("YYYY-MM-DD"),
            }
        })

        axios.post(API_USER_PROFILE_CALENDAR,data)
            .then(async res=>{
                this.props.toastManager.add("Add Calendar Success", { appearance: 'success' ,autoDismiss: true});
                this.props.handleClose();
                this.props.setCalendar(await getCalendar());
            }).catch(err=>{
                _error_handler(this.props.toastManager,err)
        })
    }

    onCaptionChange = (index,caption)=>{
        let newList = this.state.selectDate
        newList[index].caption = caption
        this.setState({
            selectDate:newList
        });
    }

    componentDidMount() {
        let selectDate = [];
        if (_.isArray(this.props.calendars)){
            this.props.calendars.map((item,i)=>{
                selectDate.push({
                    startDate: new Date(item.startDate),
                    endDate: new Date(item.endDate),
                    caption:item.title,
                    id:item.id,
                    key: 'date' + keyCount++,
                })
            })
        }
        if(selectDate.length === 0){
            this.onAddDate();
        } else {
            this.setState({selectDate,selectItem:0});
        }
    }


    render() {
        return (
            <Modal onExit={()=>{
                keyCount = 1;
            }} isOpen={true} toggle={this.props.handleClose} size={"lg"}>
                <ModalHeader toggle={this.props.handleClose}
                             style={{
                                 backgroundColor: "#DDDDDD",
                                 fontFamily:"Cloud"}}
                >Calendar</ModalHeader>

                <ModalBody>
                    <Content>
                        <div style={{
                            display:"flex",
                            justifyContent: "space-between",
                            width:"100%",
                            borderBottom:"solid 1.5px #c2c2c2",
                            margin:"0 1em 0 1em",
                        }}>
                            <TopButton onClick={this.onAddDate}>+ Add</TopButton>
                            <TopButton onClick={this.onClearAll}>Clear All</TopButton>
                        </div>

                        <DateWrap>
                           <DateRange
                                        ranges={this.state.selectDate}
                                        rangeColors={DEFAULT_COLOR_LIST}
                                        onChange={this.handleSelect}
                                        months={this.props.isMobile?1:2}
                                        focusedRange={[this.state.selectItem,this.state.selectMode]}
                                        showDateDisplay={false}
                                        direction={"horizontal"}
                                        showMonthAndYearPickers={false}
                                        className={"dateRange"}
                                        minDate={new Date()}

                                    />
                        </DateWrap>

                        <div style={{width:"100%"}}>
                            <DaysHeader>วันว่างทั้งหมด</DaysHeader>
                            <DayList>
                                {this.state.selectDate.map((item,i)=>(
                                    <AvailableDayItem key={i} item={item} startDate={item.startDate} endDate={item.endDate} caption={item.caption}
                                        onClick={()=>this.onSelectToEdit(i)} select={this.state.selectItem===i} ribbonColor={item.color||DEFAULT_COLOR}
                                                      onRemove={this.onRemove} onCaptionChange={(e)=>this.onCaptionChange(i,e.target.value)}
                                                      isMobile={this.props.isMobile}
                                    />
                                ))}
                            </DayList>
                        </div>



                        <ButtonGroup>
                            <Cancel color="secondary" onClick={this.props.handleClose}>Cancel</Cancel>
                            <Save color="primary" onClick={this.onSaveDate}>Save</Save>
                        </ButtonGroup>
                    </Content>

                </ModalBody>
            </Modal>
        );
    }
}


AddCalendar.propTypes = {
    handleClose: PropTypes.func.isRequired
}

export default  compose(
    withNamespaces(["add_calendar" ]),
    withToastManager,
    connect(store=>{
        return {
            calendars: store.personalReducer.calendars
        }
    },{setCalendar})
)(AddCalendar);
